generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccountsUser {
  id         String   @id @default(uuid())
  firebaseId String   @unique @map("firebase_id")
  email      String   @unique
  type       UserType

  companyInformations Company? @relation(fields: [companyId], references: [id])
  companyId           String?  @map("company_id")

  userInformations User?   @relation(fields: [userId], references: [id])
  userId           String?

  recruiterInformations Recruiter? @relation(fields: [recruiterId], references: [id])
  recruiterId           String?    @map("recruiter_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("accounts_users")
}

model Company {
  id     String  @id @default(uuid())
  userId String? @unique @map("user_id")

  name         String
  description  String
  profileImage String @map("profile_image")
  phone        String

  city    String
  state   String
  country String

  user         AccountsUser[]
  jobVacancies JobVacancy[]

  @@map("companies")
}

model User {
  id     String  @id @default(uuid())
  userId String? @unique @map("user_id")

  profileImage String
  name         String
  bio          String

  age     Int
  phone   String
  city    String
  state   String
  country String

  position  String
  seniority String

  applications JobApplication[]
  accountsUser AccountsUser[]
  Portfolio    Portfolio[]
  Experience   Experience[]

  @@map("users")
}

model Recruiter {
  id     String  @id @default(uuid())
  userId String? @unique @map("user_id")

  profileImage String
  name         String
  age          Int
  phone        String
  city         String
  state        String
  country      String

  accountsUser AccountsUser[]
  jobVacancies JobVacancy[]

  @@map("recruiters")
}

model JobVacancy {
  id           String  @id @default(uuid())
  companyId    String? @map("company_id")
  recruiterId  String? @map("recruiter_id")
  position     String
  description  String
  positionType String  @map("position_type")
  externalLink String  @map("external_link")
  vacancyType  String  @map("vacancy_type")
  salaryRange  String  @map("salary_range")
  open         Boolean

  company      Company?         @relation(fields: [companyId], references: [id])
  recruiter    Recruiter?       @relation(fields: [recruiterId], references: [id])
  applications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  endAt     DateTime @map("end_at")

  @@map("job_vacancies")
}

model JobApplication {
  id        String     @id @default(uuid())
  userId    String
  vacancyId String
  user      User       @relation(fields: [userId], references: [id])
  vacancy   JobVacancy @relation(fields: [vacancyId], references: [id])

  appliedAt DateTime @default(now()) @map("applied_at")

  @@map("job_applications")
}

model Portfolio {
  id          String @id @default(uuid())
  userId      String
  title       String
  description String
  link        String
  user        User   @relation(fields: [userId], references: [id])

  @@map("portfolios")
}

model Experience {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String
  companyName String   @map("company_name")
  location    String
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  user        User     @relation(fields: [userId], references: [id])

  @@map("experiences")
}

enum UserType {
  COMPANY
  COMMON
  RECRUITER
}
